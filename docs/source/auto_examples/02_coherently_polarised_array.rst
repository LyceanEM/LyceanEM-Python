
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\02_coherently_polarised_array.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_coherently_polarised_array.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_coherently_polarised_array.py:


Modelling a Coherently Polarised Aperture
======================================================

This example uses the frequency domain :func:`lyceanem.models.frequency_domain.calculate_farfield` function to predict
the farfield pattern for a linearly polarised aperture. This could represent an antenna array without any beamforming
weights.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: Python

    import copy

    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 18-27

Setting Farfield Resolution and Wavelength
-------------------------------------------
LyceanEM uses Elevation and Azimuth to record spherical coordinates, ranging from -180 to 180 degrees in azimuth,
and from -90 to 90 degrees in elevation. In order to launch the aperture projection function, the resolution in
both azimuth and elevation is requried.
In order to ensure a fast example, 37 points have been used here for both, giving a total of 1369 farfield points.

The wavelength of interest is also an important variable for antenna array analysis, so we set it now for 10GHz,
an X band aperture.

.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: Python


    az_res = 181
    elev_res = 181
    wavelength = 3e8 / 10e9








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Geometries
------------------------
In order to make things easy to start, an example geometry has been included within LyceanEM for a UAV, and the
triangle structures can be accessed by importing the data subpackage

.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    import lyceanem.tests.reflectordata as data
    body=data.UAV_Demo(wavelength*0.5)
    array=data.UAV_Demo_Aperture(wavelength*0.5)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\meshio\stl\_stl.py:40: RuntimeWarning: overflow encountered in scalar multiply
      if 84 + num_triangles * 50 == filesize_bytes:




.. GENERATED FROM PYTHON SOURCE LINES 44-80

.. code-block:: Python



    from lyceanem.base_classes import structures, points,antenna_structures

    blockers = structures([body])
    aperture=points([array])
    array_on_platform=antenna_structures(blockers, aperture)
    from lyceanem.models.frequency_domain import calculate_farfield




    import pyvista as pv

    pl=pv.Plotter()
    pl.add_mesh(pv.from_meshio(body),color="green")
    pl.add_mesh(pv.from_meshio(array))
    pl.add_axes()
    pl.show()


    desired_E_axis = np.zeros((1, 3), dtype=np.float32)
    desired_E_axis[0, 1] = 1.0

    Etheta, Ephi = calculate_farfield(
        array_on_platform.export_all_points(),
        array_on_platform.export_all_structures(),
        array_on_platform.excitation_function(desired_e_vector=desired_E_axis,wavelength=wavelength,transmit_power=1.0),
        az_range=np.linspace(-180, 180, az_res),
        el_range=np.linspace(-90, 90, elev_res),
        wavelength=wavelength,
        farfield_distance=20,
        project_vectors=False,
        beta=(2*np.pi)/wavelength
    )








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/images/sphx_glr_02_coherently_polarised_array_001.png
        :alt: 02 coherently polarised array
        :srcset: /auto_examples/images/sphx_glr_02_coherently_polarised_array_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: C:\Users\lycea\PycharmProjects\LyceanEM-Python\docs\source\auto_examples\images\sphx_glr_02_coherently_polarised_array_001.vtksz



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\empropagation.py:3719: ComplexWarning: Casting complex values to real discards the imaginary part
      uvn_axes[2, :] = point_vector
    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\empropagation.py:3736: ComplexWarning: Casting complex values to real discards the imaginary part
      uvn_axes[0, :] = np.cross(local_axes[2, :], point_vector) / np.linalg.norm(
    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\empropagation.py:3758: ComplexWarning: Casting complex values to real discards the imaginary part
      uvn_axes[1, :] = np.cross(point_vector, uvn_axes[0, :]) / np.linalg.norm(




.. GENERATED FROM PYTHON SOURCE LINES 81-89

Storing and Manipulating Antenna Patterns
---------------------------------------------
The resultant antenna pattern can be stored in :class:`lyceanem.base.antenna_pattern` as it has been modelled as one
distributed aperture, the advantage of this class is the integrated display, conversion and export functions. It is
very simple to define, and save the pattern, and then display with a call
to :func:`lyceanem.base.antenna_pattern.display_pattern`. This produces 3D polar plots which can be manipulated to
give a better view of the whole pattern, but if contour plots are required, then this can also be produced by passing
plottype='Contour' to the function.

.. GENERATED FROM PYTHON SOURCE LINES 89-116

.. code-block:: Python


    from lyceanem.base_classes import antenna_pattern

    UAV_Static_Pattern = antenna_pattern(
        azimuth_resolution=az_res, elevation_resolution=elev_res
    )
    UAV_Static_Pattern.pattern[:, :, 0] = Etheta.reshape(elev_res,az_res)
    UAV_Static_Pattern.pattern[:, :, 1] = Ephi.reshape(elev_res,az_res)

    UAV_Static_Pattern.display_pattern(desired_pattern='Power')

    UAV_Static_Pattern.display_pattern(plottype="Contour")

    pattern_mesh=UAV_Static_Pattern.pattern_mesh()

    from lyceanem.electromagnetics.beamforming import create_display_mesh

    display_mesh=create_display_mesh(pattern_mesh,label="D(Total)",dynamic_range=60)
    display_mesh.point_data['D(Total - dBi)']=10*np.log10(display_mesh.point_data['D(Total)'])
    plot_max=5*np.ceil(np.nanmax(display_mesh.point_data['D(Total - dBi)'])/5)


    pl=pv.Plotter()
    pl.add_mesh(pv.from_meshio(body),color="green")
    pl.add_mesh(pv.from_meshio(array),color="aqua")
    pl.add_mesh(display_mesh,scalars="D(Total - dBi)",style="points",clim=[plot_max-60,plot_max])
    pl.add_axes()
    pl.show()






.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /auto_examples/images/sphx_glr_02_coherently_polarised_array_002.png
        :alt: 02 coherently polarised array
        :srcset: /auto_examples/images/sphx_glr_02_coherently_polarised_array_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: C:\Users\lycea\PycharmProjects\LyceanEM-Python\docs\source\auto_examples\images\sphx_glr_02_coherently_polarised_array_002.vtksz


.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_02_coherently_polarised_array_003.png
         :alt: Power Pattern
         :srcset: /auto_examples/images/sphx_glr_02_coherently_polarised_array_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_02_coherently_polarised_array_004.png
         :alt: Etheta
         :srcset: /auto_examples/images/sphx_glr_02_coherently_polarised_array_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_02_coherently_polarised_array_005.png
         :alt: Ephi
         :srcset: /auto_examples/images/sphx_glr_02_coherently_polarised_array_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\beamforming.py:1277: RuntimeWarning: divide by zero encountered in log10
      logdata = 10 * np.log10(data)
    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\beamforming.py:1280: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)
    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\beamforming.py:1280: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)
    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\emfunctions.py:539: RuntimeWarning: divide by zero encountered in log10
      field_data.point_data["Poynting_Vector_(Magnitude_(dBW/m2))"] = 10 * np.log10(
    C:\Users\lycea\miniconda3\envs\CudaDevelopment\Lib\site-packages\lyceanem\electromagnetics\beamforming.py:1615: RuntimeWarning: divide by zero encountered in log10
      logdata = log_multiplier * np.log10(pattern_mesh.point_data[label])
    C:\Users\lycea\PycharmProjects\LyceanEM-Python\docs\examples\02_coherently_polarised_array.py:107: RuntimeWarning: divide by zero encountered in log10
      display_mesh.point_data['D(Total - dBi)']=10*np.log10(display_mesh.point_data['D(Total)'])





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 46.954 seconds)


.. _sphx_glr_download_auto_examples_02_coherently_polarised_array.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_coherently_polarised_array.ipynb <02_coherently_polarised_array.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_coherently_polarised_array.py <02_coherently_polarised_array.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02_coherently_polarised_array.zip <02_coherently_polarised_array.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
