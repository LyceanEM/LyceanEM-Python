
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/06_farfield_polarisation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_06_farfield_polarisation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_06_farfield_polarisation.py:


Modelling Different Farfield Polarisations
======================================================

This example uses the frequency domain :func:`lyceanem.models.frequency_domain.calculate_farfield` function to predict
the farfield pattern for a linearly polarised aperture. This could represent an antenna array without any beamforming
weights.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default

    import numpy as np
    import open3d as o3d
    import copy








.. GENERATED FROM PYTHON SOURCE LINES 18-27

Setting Farfield Resolution and Wavelength
-------------------------------------------
LyceanEM uses Elevation and Azimuth to record spherical coordinates, ranging from -180 to 180 degrees in azimuth,
and from -90 to 90 degrees in elevation. In order to launch the aperture projection function, the resolution in
both azimuth and elevation is requried.
In order to ensure a fast example, 37 points have been used here for both, giving a total of 1369 farfield points.

The wavelength of interest is also an important variable for antenna array analysis, so we set it now for 10GHz,
an X band aperture.

.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: default


    az_res = 37
    elev_res = 37
    wavelength = 3e8 / 10e9








.. GENERATED FROM PYTHON SOURCE LINES 33-35

Generating consistent polarisations using point sources
----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 35-52

.. code-block:: default


    import lyceanem.geometry.targets as TL
    from lyceanem.base_classes import points, structures, antenna_structures

    # horn_body, aperture_coords = TL.meshedHorn(
    #    58e-3, 58e-3, 128e-3, 2e-3, 0.21, 0.5*wavelength
    # )
    aperture_coords = o3d.geometry.PointCloud()
    point1 = np.asarray([0.0, 0, 0]).reshape(1, 3)
    normal1 = np.asarray([0, 0, 1.0]).reshape(1, 3)
    aperture_coords.points = o3d.utility.Vector3dVector(point1)
    aperture_coords.normals = o3d.utility.Vector3dVector(normal1)
    aperture = points([aperture_coords])
    blockers = structures([None])
    point_antenna = antenna_structures(blockers, aperture)









.. GENERATED FROM PYTHON SOURCE LINES 53-55

Generate U directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 55-62

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 0] = 1.0
    u_pattern = point_antenna.calculate_farfield(desired_E_axis, wavelength)
    u_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_06_farfield_polarisation_001.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_06_farfield_polarisation_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/compiler.py:726: NumbaPerformanceWarning: Grid size (6) < 2 * SM count (28) will likely result in GPU under utilization due to low occupancy.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))




.. GENERATED FROM PYTHON SOURCE LINES 63-65

Generate V directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 1] = 1.0
    v_pattern = point_antenna.calculate_farfield(desired_E_axis, wavelength)
    v_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_06_farfield_polarisation_002.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_06_farfield_polarisation_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/compiler.py:726: NumbaPerformanceWarning: Grid size (6) < 2 * SM count (28) will likely result in GPU under utilization due to low occupancy.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 73-75

Generate N-normal directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 75-82

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 2] = 1.0
    n_pattern = point_antenna.calculate_farfield(desired_E_axis, wavelength)
    n_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_06_farfield_polarisation_003.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_06_farfield_polarisation_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/compiler.py:726: NumbaPerformanceWarning: Grid size (6) < 2 * SM count (28) will likely result in GPU under utilization due to low occupancy.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))




.. GENERATED FROM PYTHON SOURCE LINES 83-85

Rotate point source and calculate new patterns


.. GENERATED FROM PYTHON SOURCE LINES 85-93

.. code-block:: default


    point_antenna.rotate_antenna(
        o3d.geometry.get_rotation_matrix_from_axis_angle(
            np.radians(np.asarray([0.0, 0.0, 90.0]))
        )
    )









.. GENERATED FROM PYTHON SOURCE LINES 94-96

Generate U directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 96-103

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 0] = 1.0
    u_pattern = point_antenna.calculate_farfield(desired_E_axis, wavelength)
    u_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_06_farfield_polarisation_004.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_06_farfield_polarisation_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/compiler.py:726: NumbaPerformanceWarning: Grid size (6) < 2 * SM count (28) will likely result in GPU under utilization due to low occupancy.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))




.. GENERATED FROM PYTHON SOURCE LINES 104-106

Generate V directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 106-113

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 1] = 1.0
    v_pattern = point_antenna.calculate_farfield(desired_E_axis, wavelength)
    v_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_06_farfield_polarisation_005.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_06_farfield_polarisation_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/compiler.py:726: NumbaPerformanceWarning: Grid size (6) < 2 * SM count (28) will likely result in GPU under utilization due to low occupancy.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 114-116

Generate N-normal directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 116-121

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 2] = 1.0
    n_pattern = point_antenna.calculate_farfield(desired_E_axis, wavelength)
    n_pattern.display_pattern(desired_pattern="Power")



.. image-sg:: /auto_examples/images/sphx_glr_06_farfield_polarisation_006.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_06_farfield_polarisation_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/compiler.py:726: NumbaPerformanceWarning: Grid size (6) < 2 * SM count (28) will likely result in GPU under utilization due to low occupancy.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.990 seconds)


.. _sphx_glr_download_auto_examples_06_farfield_polarisation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 06_farfield_polarisation.py <06_farfield_polarisation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 06_farfield_polarisation.ipynb <06_farfield_polarisation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
