
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/07_aperture_farfield_polarisation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_07_aperture_farfield_polarisation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_07_aperture_farfield_polarisation.py:


Modelling a Coherently Polarised Aperture using the Antenna Structure Class
============================================================================

This example uses the frequency domain :func:`lyceanem.models.frequency_domain.calculate_farfield` function to predict
the farfield pattern for a linearly polarised aperture. This could represent an antenna array without any beamforming
weights. This example differs from 02 by using the antenna structure class as a container for both the antenna points and structure, and also by calling the calculate farfield function using the class.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default

    import numpy as np
    import open3d as o3d
    import copy








.. GENERATED FROM PYTHON SOURCE LINES 18-27

Setting Farfield Resolution and Wavelength
-------------------------------------------
LyceanEM uses Elevation and Azimuth to record spherical coordinates, ranging from -180 to 180 degrees in azimuth,
and from -90 to 90 degrees in elevation. In order to launch the aperture projection function, the resolution in
both azimuth and elevation is requried.
In order to ensure a fast example, 37 points have been used here for both, giving a total of 1369 farfield points.

The wavelength of interest is also an important variable for antenna array analysis, so we set it now for 10GHz,
an X band aperture.

.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: default


    az_res = 181
    elev_res = 181
    wavelength = 3e8 / 10e9








.. GENERATED FROM PYTHON SOURCE LINES 33-35

Generating consistent Horn Antenna and
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 35-49

.. code-block:: default


    import lyceanem.geometry.targets as TL
    from lyceanem.base_classes import points, structures, antenna_structures

    horn_body, aperture_coords = TL.meshedHorn(
        58e-3, 58e-3, 128e-3, 2e-3, 0.21, 0.5 * wavelength
    )

    aperture = points([aperture_coords])
    blockers = structures([horn_body])
    horn_antenna = antenna_structures(blockers, aperture)

    horn_antenna.visualise_antenna()








.. GENERATED FROM PYTHON SOURCE LINES 50-52

Generate U directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 52-60

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 0] = 1.0
    u_pattern = horn_antenna.calculate_farfield(desired_E_axis, wavelength)
    u_pattern.display_pattern()
    u_pattern.display_pattern(desired_pattern="Power")





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_001.png
         :alt: Etheta
         :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_002.png
         :alt: Ephi
         :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_003.png
         :alt: Power Pattern
         :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 61-63

Generate V directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 1] = 1.0
    v_pattern = horn_antenna.calculate_farfield(desired_E_axis, wavelength)
    v_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_004.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Generate N-normal directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 2] = 1.0
    n_pattern = horn_antenna.calculate_farfield(desired_E_axis, wavelength)
    n_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_005.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 81-83

Rotate point source and calculate new patterns. The important thing to understand here is that the polarisation is consitent with both the farfield and global axes, and the local antenna orientation, so that if you rotate the antenna and generate the pattern it is consistent with the way the polarisation would change if you rotated a physical antenna in this way. This has been written this way to make modelling antennas and antenna arrays on moving platforms easier, so the local axes and motion relative to the global reference frame can be accounted for in a consistent manner.


.. GENERATED FROM PYTHON SOURCE LINES 83-91

.. code-block:: default


    horn_antenna.rotate_antenna(
        o3d.geometry.get_rotation_matrix_from_axis_angle(
            np.radians(np.asarray([0.0, 45.0, 0.0]))
        )
    )
    horn_antenna.visualise_antenna()








.. GENERATED FROM PYTHON SOURCE LINES 92-94

Generate U directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 94-102

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 0] = 1.0
    u_pattern = horn_antenna.calculate_farfield(desired_E_axis, wavelength)
    u_pattern.display_pattern()
    u_pattern.display_pattern(desired_pattern="Power")





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_006.png
         :alt: Etheta
         :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_007.png
         :alt: Ephi
         :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_008.png
         :alt: Power Pattern
         :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 103-105

Generate V directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 105-112

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 1] = 1.0
    v_pattern = horn_antenna.calculate_farfield(desired_E_axis, wavelength)
    v_pattern.display_pattern(desired_pattern="Power")





.. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_009.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)




.. GENERATED FROM PYTHON SOURCE LINES 113-115

Generate N-normal directed electric current source


.. GENERATED FROM PYTHON SOURCE LINES 115-120

.. code-block:: default


    desired_E_axis = np.zeros((1, 3), dtype=np.complex64)
    desired_E_axis[0, 2] = 1.0
    n_pattern = horn_antenna.calculate_farfield(desired_E_axis, wavelength)
    n_pattern.display_pattern(desired_pattern="Power")



.. image-sg:: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_010.png
   :alt: Power Pattern
   :srcset: /auto_examples/images/sphx_glr_07_aperture_farfield_polarisation_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/timtitan/anaconda3/envs/EMDevelopment/lib/python3.8/site-packages/numba/cuda/cudadrv/devicearray.py:885: NumbaPerformanceWarning: Host array used in CUDA kernel will incur copy overhead to/from device.
      warn(NumbaPerformanceWarning(msg))
    /home/timtitan/Documents/10-19-Research-Projects/14-Electromagnetics-Modelling/14.04-Python-Development/LyceanEM/lyceanem/electromagnetics/beamforming.py:1083: RuntimeWarning: divide by zero encountered in log10
      logdata = 20 * np.log10(data)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  21.755 seconds)


.. _sphx_glr_download_auto_examples_07_aperture_farfield_polarisation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 07_aperture_farfield_polarisation.py <07_aperture_farfield_polarisation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 07_aperture_farfield_polarisation.ipynb <07_aperture_farfield_polarisation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
